{"$message_type":"diagnostic","message":"cannot call associated function on trait without specifying the corresponding `impl` type","code":{"code":"E0790","explanation":"You need to specify a specific implementation of the trait in order to call the\nmethod.\n\nErroneous code example:\n\n```compile_fail,E0790\ntrait Coroutine {\n    fn create() -> u32;\n}\n\nstruct Impl;\n\nimpl Coroutine for Impl {\n    fn create() -> u32 { 1 }\n}\n\nstruct AnotherImpl;\n\nimpl Coroutine for AnotherImpl {\n    fn create() -> u32 { 2 }\n}\n\nlet cont: u32 = Coroutine::create();\n// error, impossible to choose one of Coroutine trait implementation\n// Should it be Impl or AnotherImpl, maybe something else?\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to use a concrete\ntype:\n\n```\ntrait Coroutine {\n    fn create() -> u32;\n}\n\nstruct AnotherImpl;\n\nimpl Coroutine for AnotherImpl {\n    fn create() -> u32 { 2 }\n}\n\nlet gen1 = AnotherImpl::create();\n\n// if there are multiple methods with same name (different traits)\nlet gen2 = <AnotherImpl as Coroutine>::create();\n```\n"},"level":"error","spans":[{"file_name":"src/signature_algorithm.rs","byte_start":36,"byte_end":57,"line_start":2,"line_end":2,"column_start":5,"column_end":26,"is_primary":false,"text":[{"text":"    fn generateKeyPair();","highlight_start":5,"highlight_end":26}],"label":"`SignatureAlgorithm::generateKeyPair` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":42,"byte_end":100,"line_start":4,"line_end":4,"column_start":5,"column_end":63,"is_primary":true,"text":[{"text":"    signature_algorithm::SignatureAlgorithm::generateKeyPair();","highlight_start":5,"highlight_end":63}],"label":"cannot call associated function of trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0790]\u001b[0m\u001b[0m\u001b[1m: cannot call associated function on trait without specifying the corresponding `impl` type\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    signature_algorithm::SignatureAlgorithm::generateKeyPair();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot call associated function of trait\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/signature_algorithm.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn generateKeyPair();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`SignatureAlgorithm::generateKeyPair` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 1 previous error\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0790`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0790`.\u001b[0m\n"}
